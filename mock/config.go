// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blueworrybear/svg-charts/core (interfaces: Config)

// Package mock is a generated GoMock package.
package mock

import (
	core "github.com/blueworrybear/svg-charts/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockConfig is a mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMockRecorder
}

// MockConfigMockRecorder is the mock recorder for MockConfig
type MockConfigMockRecorder struct {
	mock *MockConfig
}

// NewMockConfig creates a new mock instance
func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &MockConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfig) EXPECT() *MockConfigMockRecorder {
	return m.recorder
}

// CanvasHeight mocks base method
func (m *MockConfig) CanvasHeight() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanvasHeight")
	ret0, _ := ret[0].(int)
	return ret0
}

// CanvasHeight indicates an expected call of CanvasHeight
func (mr *MockConfigMockRecorder) CanvasHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanvasHeight", reflect.TypeOf((*MockConfig)(nil).CanvasHeight))
}

// CanvasWidth mocks base method
func (m *MockConfig) CanvasWidth() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanvasWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// CanvasWidth indicates an expected call of CanvasWidth
func (mr *MockConfigMockRecorder) CanvasWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanvasWidth", reflect.TypeOf((*MockConfig)(nil).CanvasWidth))
}

// ChartHeight mocks base method
func (m *MockConfig) ChartHeight() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChartHeight")
	ret0, _ := ret[0].(int)
	return ret0
}

// ChartHeight indicates an expected call of ChartHeight
func (mr *MockConfigMockRecorder) ChartHeight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChartHeight", reflect.TypeOf((*MockConfig)(nil).ChartHeight))
}

// ChartTitle mocks base method
func (m *MockConfig) ChartTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChartTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// ChartTitle indicates an expected call of ChartTitle
func (mr *MockConfigMockRecorder) ChartTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChartTitle", reflect.TypeOf((*MockConfig)(nil).ChartTitle))
}

// ChartWidth mocks base method
func (m *MockConfig) ChartWidth() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChartWidth")
	ret0, _ := ret[0].(int)
	return ret0
}

// ChartWidth indicates an expected call of ChartWidth
func (mr *MockConfigMockRecorder) ChartWidth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChartWidth", reflect.TypeOf((*MockConfig)(nil).ChartWidth))
}

// LegendPosition mocks base method
func (m *MockConfig) LegendPosition() core.Position {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegendPosition")
	ret0, _ := ret[0].(core.Position)
	return ret0
}

// LegendPosition indicates an expected call of LegendPosition
func (mr *MockConfigMockRecorder) LegendPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegendPosition", reflect.TypeOf((*MockConfig)(nil).LegendPosition))
}

// LegendTitle mocks base method
func (m *MockConfig) LegendTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LegendTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegendTitle indicates an expected call of LegendTitle
func (mr *MockConfigMockRecorder) LegendTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LegendTitle", reflect.TypeOf((*MockConfig)(nil).LegendTitle))
}

// XAxisTitle mocks base method
func (m *MockConfig) XAxisTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XAxisTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// XAxisTitle indicates an expected call of XAxisTitle
func (mr *MockConfigMockRecorder) XAxisTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XAxisTitle", reflect.TypeOf((*MockConfig)(nil).XAxisTitle))
}

// YAxisTitle mocks base method
func (m *MockConfig) YAxisTitle() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YAxisTitle")
	ret0, _ := ret[0].(string)
	return ret0
}

// YAxisTitle indicates an expected call of YAxisTitle
func (mr *MockConfigMockRecorder) YAxisTitle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YAxisTitle", reflect.TypeOf((*MockConfig)(nil).YAxisTitle))
}
